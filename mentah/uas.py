# -*- coding: utf-8 -*-
"""UAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B88MtPs7MYu43UC3SPcwVvEQOQ8YFd71
"""

# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Setelah diupload, pastikan nama file yang digunakan adalah 'Data_COVID19_Indonesia.csv'
df = pd.read_csv('Data_COVID19_Indonesia.csv')

df.head()

df.isnull().sum()

df = df.dropna(subset=['New Cases', 'New Deaths', 'Total Cases', 'Population'])

df['Date'] = pd.to_datetime(df['Date'])

df['Days Since Start'] = (df['Date'] - df['Date'].min()).dt.days

features = ['Days Since Start', 'Total Cases', 'Total Deaths', 'Total Recovered', 'Population Density', 'New Deaths', 'Growth Factor of New Cases']
target = 'Case Fatality Rate'

df['Case Fatality Rate'] = (df['Total Deaths'] / df['Total Cases']) * 100

df[features] = df[features].fillna(df[features].mean())

X = df[features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Case Fatality Rate')
plt.ylabel('Predicted Case Fatality Rate')
plt.title('Actual vs Predicted Case Fatality Rate')
plt.show()

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Kuadrat Error: {mse}')
print(f'Akar Mean Kuadrat Error: {rmse}')
print(f'R^2 Score: {r2}')

coefficients = pd.DataFrame(model.coef_, features, columns=['Koefisien'])
print(coefficients)

def predict_cfr(input_date):
    # Convert the input date to datetime
    input_date = pd.to_datetime(input_date)

    # Calculate days since the start (same as in feature engineering)
    days_since_start = (input_date - df['Date'].min()).days

    # Prepare input for the model (use the average or specific values for other features)
    # For simplicity, we will use the latest values of other features
    # For prediction, we need to apply the same feature engineering used for training
    latest_features = df[features].iloc[-1:].copy()  # Get the last row for prediction
    latest_features['Days Since Start'] = days_since_start  # Update the date feature

    # Standardize the input before predicting (using the same scaler)
    latest_features_scaled = scaler.transform(latest_features)

    # Predict the Case Fatality Rate
    predicted_cfr = model.predict(latest_features_scaled)

    return predicted_cfr[0]

# Input the date you want to predict
input_date = '2021-05-01'  # Example input, you can change this
predict_cfr = predict_cfr(input_date)

print(f"Predicted Case Fatality Rate for {input_date}: {predict_cfr}")